#!/bin/bash

# Auto-Installation Script
# ========================
# This script aims to automate the process of installing Arch Linux onto my Lenovo T440s.
# As a result, the configuration is opinionated. However, the script generally follows
# along with the guide on the [Arch Linux wiki](https://wiki.archlinux.org/index.php/Installation_guide).
#
# Pre-Installation Setup
# ----------------------
# It's assumed that this script will be run after cloning the git repo. As a result,
# there's a number of steps that will need to be taken manually in preparation.
#
### Configure WiFi Connection
# 1. `systemctl stop dhcpcd@<TAB>`
# 2. `ip link set wlp3s0 up`
# 3. `wpa_supplicant -B -i wlp3s0 -c <(wpa_passphrase "<SSID>" "<PASSPHRASE>")`
# 4. `systemctl start dhcpcd@wlp3s0.service`
# 5. `ping 8.8.8.8`
#
### Clone Git Repo
# 1. `mount -o remount,size=2G /run/archiso/cowspace`
# 2. `pacman -Sy git`
# 3. `git clone --depth 1 https://github.com/ScottHamper/t440s-arch-install.git`
#
# Alternatively, without Git:
# 1. `curl https://raw.githubusercontent.com/ScottHamper/t440s-arch-install/master/install -o install`

set -e

# Use `lsblk` to determine which devices should be passed into the script
while getopts ":r:b:h:" arg; do
    case ${arg} in
        r) root_disk=$OPTARG;;
        b) boot_disk=$OPTARG;;
        h) hostname=$OPTARG;;
    esac
done

assert_disk_exists() {
    if [ "$(blkid -o device ${1})" != "${1}" ]; then
        echo "Error: device '${1}' does not exist."
        exit 1
    fi
}

assert_disk_exists ${root_disk}
assert_disk_exists ${boot_disk}

uuid() {
    blkid -s UUID -o value $1
}

timedatectl set-ntp true

# Partitioning
sgdisk --clear ${root_disk}
sgdisk -n 1:0:0 ${root_disk}

sgdisk --clear ${boot_disk}
sgdisk -n 1:0:+200M ${boot_disk}
sgdisk -n 2:0:+512M -t 2:ef00 ${boot_disk}

# Setting up LUKS
head -c 4096 < /dev/random > /root/crypto_keyfile.bin
chmod 0000 /root/crypto_keyfile.bin
cryptsetup -q --use-random --key-size 512 --iter-time 2000 luksFormat ${root_disk} /root/crypto_keyfile.bin
cryptsetup open ${root_disk} cryptroot --key-file /root/crypto_keyfile.bin

# Formatting
mkfs.btrfs -f /dev/mapper/cryptroot
mkfs.btrfs -f ${boot_disk}1
mkfs.vfat -F32 ${boot_disk}2

# Labeling
btrfs filesystem label /dev/mapper/cryptroot T440S_ROOT
btrfs filesystem label ${boot_disk}1 T440S_BOOT
fatlabel ${boot_disk}2 T440S_ESP

# Mounting
mount /dev/mapper/cryptroot /mnt
mkdir /mnt/boot
mount ${boot_disk}1 /mnt/boot
mkdir /mnt/boot/efi
mount ${boot_disk}2 /mnt/boot/efi

# Installing
pacstrap /mnt base intel-ucode refind-efi btrfs-progs sudo iw wpa_supplicant ldns git
cat << EOF > /mnt/etc/fstab
# <file system>                              <dir>       <type>  <options>    <dump> <pass>
UUID=$(uuid /dev/mapper/cryptroot)    /           btrfs   rw,noatime,ssd,space_cache,subvolid=5,subvol=/      0 0
UUID=$(uuid ${boot_disk}1)    /boot       btrfs   noauto,rw,noatime,space_cache,subvolid=5,subvol=/   0 0
UUID=$(uuid ${boot_disk}2)    /boot/efi   vfat    noauto,rw,noatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro  0 2
EOF

# Configuring
mv /root/crypto_keyfile.bin /mnt
chmod 600 /mnt/boot/initramfs-linux*
ln -sf /usr/share/zoneinfo/America/New_York /mnt/etc/localtime
echo "en_US.UTF-8 UTF-8" > /mnt/etc/locale.gen
echo "LANG=en_US.UTF-8" > /mnt/etc/locale.conf
echo "KEYMAP=dvorak" > /mnt/etc/vconsole.conf
echo ${hostname} > /mnt/etc/hostname
sed -ie 's/^BINARIES=""$/BINARIES="\/usr\/bin\/btrfs"/g' /mnt/etc/mkinitcpio.conf
sed -ie 's/^FILES=""$/FILES="\/crypto_keyfile.bin"/g' /mnt/etc/mkinitcpio.conf
sed -ie 's/^HOOKS=".*"$/HOOKS="base udev autodetect modconf keyboard keymap block encrypt filesystems fsck"/g' /mnt/etc/mkinitcpio.conf

arch-chroot /mnt << EOF
useradd -m -G wheel scott
hwclock --systohc # Assumes hardware clock is UTC
locale-gen
mkinitcpio -p linux

refind-install
rm /boot/refind_linux.conf
mkdir /boot/efi/EFI/refind/themes
git clone -b t440s --depth 1 https://github.com/ScottHamper/rEFInd-minimal.git /boot/efi/EFI/refind/themes/rEFInd-minimal
rm -rf /boot/efi/EFI/refind/themes/rEFInd-minimal/.git

systemctl enable systemd-networkd.service
systemctl enable systemd-resolved.service
systemctl enable wpa_supplicant@wlp3s0.service
rm /etc/resolv.conf
ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf
EOF

cat << EOF > /mnt/boot/efi/EFI/refind/refind.conf
include themes/rEFInd-minimal/theme.conf
dont_scan_volumes "T440S_ROOT,T440S_BOOT,T440S_ESP"
timeout 5
use_graphics_for + linux

menuentry "Arch Linux" {
    icon /EFI/refind/themes/rEFInd-minimal/icons/os_arch.png
    volume "$(blkid -s PARTUUID -o value ${boot_disk}1)"
    loader vmlinuz-linux
    initrd initramfs-linux.img
    options "cryptdevice=UUID=$(uuid ${root_disk}):cryptroot root=/dev/mapper/cryptroot rw quiet initrd=intel-ucode.img"
}
EOF

cat << EOF > /mnt/etc/sudoers.d/01-base
Defaults editor=/usr/bin/nano, !env_editor
Defaults:%wheel targetpw
%wheel ALL=(ALL) ALL
%wheel ALL= NOPASSWD: /usr/bin/halt,/usr/bin/poweroff,/usr/bin/reboot,/usr/bin/pacman -Syu
EOF

cat << EOF > /mnt/etc/systemd/network/01-wired.network
[Match]
Name=enp0s25

[Network]
DHCP=ipv4
EOF

cat << EOF > /mnt/etc/systemd/network/01-wireless.network
[Match]
Name=wlp3s0

[Network]
DHCP=ipv4
EOF

# Easily add networks to this file via `wpa_cli`, or
# `wpa_passphrase "<SSID>" "<PASSPHRASE>" | sudo tee -a /etc/wpa_supplicant/wpa_supplicant-wlp3s0.conf`
cat << EOF > /mnt/etc/wpa_supplicant/wpa_supplicant-wlp3s0.conf
ctrl_interface=/var/run/wpa_supplicant
ctrl_interface_group=wheel
update_config=1
EOF

# This is 644 by default - there's no need for that!
chmod 600 /mnt/etc/wpa_supplicant/wpa_supplicant-wlp3s0.conf
cat << EOF >> /mnt/etc/systemd/resolved.conf
# NordVPN
DNS=162.242.211.137 78.46.223.24
FallbackDNS=
DNSSEC=yes
EOF
